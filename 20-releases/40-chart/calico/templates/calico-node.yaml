# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
{{- if .Values.calicoNode.updateStrategy }}
{{ toYaml .Values.calicoNode.updateStrategy | indent 4 }}
{{- else }}
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
{{- end }}
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container performs upgrade from host-local IPAM to calico-ipam.
        # It can be deleted if this is a fresh installation, or if you have already
        # upgraded to use calico-ipam.
        - name: upgrade-ipam
          {{- if .Values.global.registry }}
          image: {{.Values.global.registry}}/{{.Values.calicoNode.cniImage}}:{{ default .Values.global.tag .Values.calicoNode.cniTag }}
          {{- else }}
          image: {{.Values.calicoNode.cniImage}}:{{ default .Values.global.tag .Values.calicoNode.cniTag }}
          {{- end }}
          command: ["/opt/cni/bin/calico-ipam", "-upgrade"]
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
          volumeMounts:
            - mountPath: /var/lib/cni/networks
              name: host-local-net-dir
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
          securityContext:
            privileged: true
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          {{- if .Values.global.registry }}
          image: {{.Values.global.registry}}/{{.Values.calicoNode.cniImage}}:{{ default .Values.global.tag .Values.calicoNode.cniTag }}
          {{- else }}
          image: {{.Values.calicoNode.cniImage}}:{{ default .Values.global.tag .Values.calicoNode.cniTag }}
          {{- end }}
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # Set the hostname based on the k8s node name.
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          {{- if .Values.global.registry }}
          image: {{.Values.global.registry}}/{{.Values.calicoNode.flexVolImage}}:{{ default .Values.global.tag .Values.calicoNode.flexVolTag }}
          {{- else }}
          image: {{.Values.calicoNode.flexVolImage}}:{{ default .Values.global.tag .Values.calicoNode.flexVolTag }}
          {{- end }}
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          {{- if .Values.global.registry }}
          image: {{.Values.global.registry}}/{{.Values.calicoNode.image}}:{{ default .Values.global.tag .Values.calicoNode.tag }}
          {{- else }}
          image: {{.Values.calicoNode.image}}:{{ default .Values.global.tag .Values.calicoNode.tag }}
          {{- end }}
          env:
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
            {{- if .Values.typha.enabled }}
            # Typha support: controlled by the ConfigMap.
            - name: FELIX_TYPHAK8SSERVICENAME
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: typha_service_name
            {{- end }}
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: {{ default "k8s,bgp" .Values.calicoNode.env.CLUSTER_TYPE | quote}}
            # Auto-detect the BGP IP address.
            - name: IP
              value: {{ default "autodetect" .Values.calicoNode.env.IP | quote  }}
            # Enable {{ .Values.calicoNode.encapsulation.type | upper }}
            - name: CALICO_IPV4POOL_{{ .Values.calicoNode.encapsulation.type | upper }}
              value: {{ .Values.calicoNode.encapsulation.mode | quote }}
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            {{- if .Values.calicoNode.env.CALICO_IPV4POOL_CIDR }}
            - name: CALICO_IPV4POOL_CIDR
              value: {{ .Values.calicoNode.env.CALICO_IPV4POOL_CIDR }}
            {{- end }}
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: {{ default "true" .Values.calicoNode.env.CALICO_DISABLE_FILE_LOGGING | quote }}
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: {{ default "ACCEPT" .Values.calicoNode.env.FELIX_DEFAULTENDPOINTTOHOSTACTION | quote }}
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: {{ default "false" .Values.calicoNode.env.FELIX_IPV6SUPPORT | quote }}
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: {{ default "info" .Values.calicoNode.env.FELIX_LOGSEVERITYSCREEN | quote }}
            - name: FELIX_HEALTHENABLED
              value: {{ default "true" .Values.calicoNode.env.FELIX_HEALTHENABLED | quote }}
            {{- if .Values.calicoNode.metrics.enabled }}
            - name: FELIX_PROMETHEUSMETRICSENABLED
              value: "true"
            - name: FELIX_PROMETHEUSMETRICSPORT
              value: {{ .Values.calicoNode.metrics.port | quote }}
            {{- end }}
            {{- range $key, $val := .Values.calicoNode.extraEnv }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
          securityContext:
            privileged: true
          resources:
{{- if .Values.calicoNode.resources }}
{{ toYaml .Values.calicoNode.resources | indent 12 }}
{{- else }}
            requests:
              cpu: 250m
{{- end }}
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              {{- if eq .Values.calicoConfig.backend "bird" }}
              - -bird-live
              {{- end }}
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              {{- if eq .Values.calicoConfig.backend "bird" }}
              - -bird-ready
              {{- end }}
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - name: policysync
              mountPath: /var/run/nodeagent
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the directory for host-local IPAM allocations. This is
        # used when upgrading from host-local to calico-ipam, and can be removed
        # if not using the upgrade-ipam init container.
        - name: host-local-net-dir
          hostPath:
            path: /var/lib/cni/networks
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
